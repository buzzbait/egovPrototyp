로운 매니저 사이트를 작업하면서 한 서비스에 다른 여러개의 DB 를 접속시켜야되는 이슈가 발생하였습니다.

예를 들어, DB 접속정보가 따로 관리되는 채소과게와 과일가게의 매출 통계를 구하는 하면이 동일한 화면에 공존할 수 있어야 하는겁니다.

물론, 별도의 서버를 가지고 채소과게 서버와 과일가게 서버를 연달아 호출하는 방법도 있지만 기능이 동일하고 단순 DB 만 다른 경우라면 관리적인 측면에서는 같은 서버에 DB 를 2개 관리하는 것이 훨씬 유리합니다.

한 Spring boot 서버에서 2개의 Mysql DB Connection 을 가지도록 설정해보도록 하겠습니다.

 
 

1. application.yml 의존성 주입 설정
 spring
  FruitShop:
    datasource:
      jdbc-url: connection 정보
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: user 이름
      password: user 패스워드

  vegetableShop:
    datasource:
      jdbc-url: connection 정보
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: user 이름
      password: user 패스워드
 

다음과 같이 spring 밑에 2개의 datasource 를 각 내용과 함께 지정해주면 됩니다.
여기서 주의해야 할 점은 datasource 하위 항목에 url 이 아닌 jdbc-url 을 사용해야 한다는 것입니다. 만약 url 을 사용한다면 다음과 같은 오류가 발생합니다.

이런 오류가 발생하는 이유는 HikariCP 의 DatabseURL 설정에서 정의된 변수가 url 이 아닌 jdbcUrl 으로 정의되어 있기 때문입니다.

단일의 connection 만 가질 떄는 별도의 java 코드로 작성되지 않고 application.yml 에 추가하면 자동으로 url 을 jdbc-url 로 인식하여 주입해주는데, java 코드로 작성한 경우는 수동설정으로 해야하기 때문에 url 을 jdbc-url 로 인식하지 못하는 것입니다.

따라서, 수동으로 지정해줄 때에는 jdbc-url 로 key 값을 지정해서 입력해주어야합니다.

 
 

2. sqlSessionFactory 설정 및 template 설정하여 datasource create 작업
@Configuration
@MapperScan(value = "com.test.api.mapper.first", sqlSessionFactoryRef = "firstSqlSessionFactory")
public class FirstDataSourceConfiguration {
     @Primary    
     @Bean(name = "firstDataSource")
     @ConfigurationProperties(prefix = "spring.first.datasource")
     public DataSource firstDataSource() {
         return DataSourceBuilder.create().build();
     }

     @Primary
     @Bean(name = "firstSqlSessionFactory")
     public SqlSessionFactory firstSqlSessionFactory(@Qualifier("firstDataSource") DataSource firstDataSource,
                                 ApplicationContext applicationContext) throws Exception {
            SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
            sqlSessionFactoryBean.setDataSource(secondDataSource);
            sqlSessionFactoryBean.setTypeAliasesPackage("com.test.api.entity, com.test.api.vo");
            sqlSessionFactoryBean.setMapperLocations(applicationContext.getResources("classpath:mapper/first/**.xml"));
            return sqlSessionFactoryBean.getObject();
     }

     @Primary
     @Bean(name = "firstSessionTemplate")
     public SqlSessionTemplate firstSqlSessionTemplate(@Qualifier("firstSqlSessionFactory") SqlSessionFactory firstSqlSessionFactory) {
         return new SqlSessionTemplate(firstSqlSessionFactory);
     }
}
@Configuration
@MapperScan(value = "com.paymint.api.mapper.second", sqlSessionFactoryRef = "secondSqlSessionFactory")
public class SecondDataSourceConfiguration {
    @Bean(name = "SecondDataSource")
    @ConfigurationProperties(prefix="spring.second.datasource")
    public DataSource SecondDataSource() {
        return DataSourceBuilder.create().build();
    }

    @Bean(name = "secondSqlSessionFactory")
    public SqlSessionFactory secondSqlSessionFactory(@Qualifier("secondDataSource") DataSource secondDataSource,
                                                          ApplicationContext applicationContext) throws Exception {
        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
        sqlSessionFactoryBean.setDataSource(secondDataSource);
        sqlSessionFactoryBean.setTypeAliasesPackage("com.test.api.entity, com.test.api.vo");
        sqlSessionFactoryBean.setMapperLocations(applicationContext.getResources("classpath:mapper/second/**.xml"));
        return sqlSessionFactoryBean.getObject();
    }

    @Bean(name = "secondSessionTemplate")
    public SqlSessionTemplate secondSqlSessionTemplate(@Qualifier("secondSqlSessionFactory") SqlSessionFactory secondSqlSessionFactory) {
        return new SqlSessionTemplate(secondSqlSessionFactory);
    }
}
 

 

첫번 째로 설정한 application.yml 의 속성값을 토대로 위 내용과 같이 작성해주면 됩니다.
